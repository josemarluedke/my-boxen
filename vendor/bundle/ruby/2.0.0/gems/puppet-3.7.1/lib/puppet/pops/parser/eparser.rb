#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 753)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'58,61,388,275,59,53,317,54,-236,80,-238,-237,236,133,-129,-234,-239',
'-225,256,255,318,392,278,101,18,104,278,99,100,333,42,373,45,237,47',
'12,111,46,36,39,110,44,37,10,11,276,134,66,17,103,-236,38,-238,-237',
'15,16,-129,-234,-239,-225,58,61,67,334,59,53,236,54,43,277,79,81,35',
'62,278,64,65,63,107,66,48,49,51,50,18,111,52,237,79,110,42,236,45,79',
'47,113,236,46,36,39,252,44,37,253,66,312,111,66,17,66,110,38,237,254',
'15,16,369,237,368,111,58,61,67,110,59,53,229,54,43,340,111,265,35,62',
'110,64,65,359,267,268,48,49,51,50,18,111,52,307,71,110,42,369,45,368',
'47,12,236,46,36,39,69,44,37,10,11,342,273,66,17,66,329,38,58,61,15,16',
'59,237,254,326,58,61,67,249,59,53,249,54,43,72,73,74,35,62,350,64,65',
'351,273,274,48,49,51,50,18,353,52,248,247,356,42,316,45,312,47,12,361',
'46,36,39,362,44,37,10,11,236,225,66,17,228,226,38,366,313,15,16,370',
'372,75,77,76,78,67,312,249,225,379,79,43,381,299,273,35,62,79,64,65',
'215,214,71,48,49,51,50,58,61,52,153,59,53,385,54,310,150,119,79,273',
'148,391,306,119,302,120,395,372,397,398,399,18,58,61,119,402,59,42,403',
'45,404,47,12,300,46,36,39,79,44,37,10,11,71,412,66,17,68,414,38,415',
'416,15,16,302,,,,,,67,,133,,,130,43,,,,35,62,,64,65,,,,48,49,51,50,58',
'61,52,67,59,53,,54,408,80,,,,134,62,,,,,,,,,101,18,104,,99,100,,42,',
'45,,47,12,,46,36,39,,44,37,10,11,,,66,17,103,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,81,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47',
'113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11',
',,66,17,,,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50',
'58,61,52,,59,53,,54,406,80,,,,,,,,,,,,,,101,18,104,,99,100,,42,,45,',
'47,12,,46,36,39,,44,37,10,11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,',
',,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,',
'48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,',
',,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,,59,53,,54,401',
'80,,,,,,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46,36,39,,44,37,10',
'11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65',
',,,48,49,51,50,58,61,52,,59,53,,54,320,,,,,,,,,,,,,,,,18,58,61,,,59',
'42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,,,67,',
'133,,,130,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,67,59,53,,54,322',
'80,,,,134,62,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46,36,39,,44',
'37,10,11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,137,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10',
'11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,139,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17',
',,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52',
',59,53,,54,141,80,,,,,,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46',
'36,39,,44,37,10,11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43',
',,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44',
'37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64',
'65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66',
'17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49',
'51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15',
'16,,,,,58,61,67,,59,53,,152,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52',
',,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61',
'67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47',
'113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12',
',46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11',
',,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,169',
'183,175,184,47,176,186,177,36,168,,171,166,,,,,66,17,187,182,167,,,15',
'165,,,,,,,67,,,,,185,170,,,,35,62,,64,65,,,,178,179,181,180,58,61,52',
',59,53,,54,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,113,,46,36,39,,44,37,',
',,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,',
'48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,211,35',
'62,,64,65,,,,48,49,51,50,18,213,52,,,,42,,45,,47,12,,46,36,39,,44,37',
'10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,274',
',35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16',
',,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,',
'42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,,,67,',
',,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,,59,53,,54,335,,,,,,',
',,,,,,,,,18,58,61,,,59,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17',
',,38,,,15,16,,,,,,,67,,133,,,130,43,,,,35,62,,64,65,,,,48,49,51,50,58',
'61,52,67,59,53,,54,374,,,,,134,62,,,,,,,,,,18,,,,,,42,,45,,47,113,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10',
'11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,',
',,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15',
'16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52',
',,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,,,67,',
',,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,,59,53,,54,141,,,,,,',
',,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,',
',15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
'241,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16',
',,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,',
'42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61',
'67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47',
'113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39',
',44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64',
'65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,52,,,,42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16',
',,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,',
'42,,45,,47,113,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,113,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,80,,,48,49',
'51,50,,,52,,,96,91,101,,104,,99,100,,92,94,93,95,,58,61,,,59,,,,,,,',
',,103,,,,98,97,,,84,85,87,86,89,90,,82,83,80,,244,,,81,,,133,,,130,96',
'91,101,,104,,99,100,,92,94,93,95,,88,,,,,67,,,,,,,,,103,134,62,,98,97',
',,84,85,87,86,89,90,,82,83,80,,243,,,81,,,,,,,96,91,101,,104,80,99,100',
',92,94,93,95,,88,,,,,101,,104,,99,100,,,,103,,,,98,97,,,84,85,87,86',
'89,90,,82,83,103,,,,,81,,,,,87,86,,,,82,83,80,,242,,,81,,,,88,,,96,91',
'101,,104,80,99,100,,92,94,93,95,,88,,,,,101,,104,,99,100,,,,103,,,,98',
'97,,80,84,85,87,86,89,90,,82,83,103,,96,91,101,81,104,,99,100,,92,94',
'93,95,82,83,,,,,,81,,,,88,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82',
'83,,,96,91,101,81,104,,99,100,,92,94,93,95,,,,,,,,,,,,88,,,,103,,,,98',
'97,,,84,85,87,86,89,90,,82,83,,,,,,81,80,,,,,,,,,,267,268,96,91,101',
'303,104,80,99,100,88,92,94,93,95,,,,,,,101,,104,,99,100,,,,103,,,,98',
'97,,,84,85,87,86,89,90,,82,83,103,,,,,81,,,84,85,87,86,,,,82,83,80,',
',,,81,,,,88,,,96,91,101,,104,,99,100,,92,94,93,95,,88,,,,,,,,,,,,,,103',
',,,98,97,,,84,85,87,86,89,90,80,82,83,,,279,,,81,,,,96,91,101,,104,80',
'99,100,,92,94,93,95,,,,,88,,101,,104,,99,100,,,,103,,,,98,97,,80,84',
'85,87,86,89,90,,82,83,103,,96,91,101,81,104,,99,100,,92,94,93,95,82',
'83,,,,,,81,,,,88,,,,103,,,,,97,,80,84,85,87,86,89,90,,82,83,,,96,91',
'101,81,104,,99,100,,92,94,93,95,,,,,,,,,,,,88,,,,103,,,,98,97,,,84,85',
'87,86,89,90,80,82,83,,,,,,81,,,,96,91,101,271,104,80,99,100,,92,94,93',
'95,,,,,88,,101,,104,,99,100,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82',
'83,103,,96,91,101,81,104,,99,100,,92,94,93,95,82,83,,,,,,81,,,,88,,',
',103,,,,98,97,,80,84,85,87,86,89,90,,82,83,,,96,91,101,81,104,,99,100',
',92,94,93,95,,,,,,,,,,,,88,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82',
'83,,,96,91,101,81,104,,99,100,,92,94,93,95,80,,,,,,,,,,,88,,91,101,103',
'104,,99,100,80,92,,84,85,87,86,89,90,,82,83,,,101,,104,81,99,100,103',
',,,,,,,84,85,87,86,89,90,,82,83,,88,,103,,81,,,,,,84,85,87,86,80,,,82',
'83,,,,,,81,88,96,91,101,,104,,99,100,80,92,94,93,95,,,,,,,88,,,101,',
'104,,99,100,103,,,,98,97,,,84,85,87,86,89,90,,82,83,,,,103,,81,,,,,',
',,87,86,80,,,82,83,,,,,,81,88,96,91,101,,104,,99,100,80,92,94,93,95',
',,,,,,88,,91,101,,104,,99,100,103,92,,,98,97,,,84,85,87,86,89,90,,82',
'83,,,,103,,81,,,,,,84,85,87,86,89,90,80,82,83,,,,,,81,88,,,96,91,101',
',104,80,99,100,,92,94,93,95,,,,,88,,101,,104,,99,100,,,,103,,,,98,97',
',,84,85,87,86,89,90,,82,83,103,,,,,81,,,84,85,87,86,89,90,80,82,83,',
',,,,81,,,,88,,101,,104,80,99,100,,,,,,,,,,88,91,101,,104,,99,100,,92',
',103,,,,,,,,84,85,87,86,89,90,,82,83,103,,,,,81,,,84,85,87,86,89,90',
'80,82,83,,,,,,81,,,,88,91,101,,104,,99,100,,92,,,,,,,,88,,,,,,,,,,,103',
',,,,,,,84,85,87,86,89,90,,82,83,,,,,,81,,,291,183,290,184,,288,186,292',
',285,,287,289,,,,,,88,187,182,293,,,,286,,,,,,,,,,,,185,294,,,,,,,,',
',,,297,298,296,295,291,183,290,184,,288,186,292,,285,,287,289,,,,,,',
'187,182,293,,,,286,,,,,,,,,,,,185,294,,,,,,,,,,,,297,298,296,295,291',
'183,290,184,,288,186,292,,285,,287,289,,,,,,,187,182,293,,,,286,,,,',
',,,,,,,185,294,,,,,,,,,,,,297,298,296,295,291,183,290,184,,288,186,292',
',285,,287,289,,,,,,,187,182,293,,,,286,,,,,,,,,,,,185,294,,,,,,,,,,',
',297,298,296,295' ]
        racc_action_table = arr = ::Array.new(6809, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,352,174,0,0,240,0,180,191,178,181,238,248,168,167,179,166,145,145',
'240,365,323,191,0,191,365,191,191,250,0,323,0,238,0,0,113,0,0,0,113',
'0,0,0,0,174,248,0,0,191,180,0,178,181,0,0,168,167,179,166,403,403,0',
'251,403,403,312,403,0,189,161,191,0,0,189,0,0,0,12,312,0,0,0,0,403,45',
'0,312,160,45,403,119,403,159,403,403,150,403,403,403,140,403,403,140',
'119,264,12,403,403,150,12,403,119,269,403,403,320,150,320,175,4,4,403',
'175,4,4,119,4,403,270,306,150,403,403,306,403,403,306,340,340,403,403',
'403,403,4,176,403,225,154,176,4,366,4,366,4,4,225,4,4,4,4,4,4,4,4,272',
'164,4,4,225,246,4,148,148,4,4,148,225,143,245,398,398,4,138,398,398',
'136,398,4,7,7,7,4,4,280,4,4,282,284,286,4,4,4,4,398,301,4,128,126,304',
'398,239,398,308,398,398,309,398,398,398,311,398,398,398,398,237,125',
'398,398,118,116,398,319,236,398,398,321,322,7,7,7,7,398,230,212,108',
'327,106,398,339,217,341,398,398,105,398,398,102,101,70,398,398,398,398',
'228,228,398,68,228,228,349,228,228,63,351,162,355,62,360,223,213,220',
'41,369,370,372,373,376,228,177,177,40,383,177,228,384,228,390,228,228',
'219,228,228,228,8,228,228,228,228,5,400,228,228,1,405,228,407,409,228',
'228,413,,,,,,228,,177,,,177,228,,,,228,228,,228,228,,,,228,228,228,228',
'397,397,228,177,397,397,,397,397,192,,,,177,177,,,,,,,,,192,397,192',
',192,192,,397,,397,,397,397,,397,397,397,,397,397,397,397,,,397,397',
'192,,397,,,397,397,,,,,211,211,397,,211,211,,211,397,,,192,397,397,',
'397,397,,,,397,397,397,397,211,,397,,,,211,,211,,211,211,,211,211,211',
',211,211,,,,,211,211,,,211,,,211,211,,,,,10,10,211,,10,10,,10,211,,',
',211,211,,211,211,,,,211,211,211,211,10,,211,,,,10,,10,,10,10,,10,10',
'10,,10,10,10,10,,,10,10,,,10,,,10,10,,,,,11,11,10,,11,11,,11,10,,,,10',
'10,,10,10,,,,10,10,10,10,11,,10,,,,11,,11,,11,11,,11,11,11,,11,11,11',
'11,,,11,11,,,11,,,11,11,,,,,,,11,,,,,,11,,,,11,11,,11,11,,,,11,11,11',
'11,395,395,11,,395,395,,395,395,114,,,,,,,,,,,,,,114,395,114,,114,114',
',395,,395,,395,395,,395,395,395,,395,395,395,395,,,395,395,114,,395',
',,395,395,,,,,15,15,395,,15,15,,15,395,,,,395,395,,395,395,,,,395,395',
'395,395,15,,395,,,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15',
'15,,,,,16,16,15,,16,16,,16,15,,,,15,15,,15,15,,,,15,15,15,15,16,,15',
',,,16,,16,,16,16,,16,16,16,,16,16,,,,,16,16,,,16,,,16,16,,,,,17,17,16',
',17,17,,17,16,,,,16,16,,16,16,,,,16,16,16,16,17,,16,,,,17,,17,,17,17',
',17,17,17,,17,17,,,,,17,17,,,17,,,17,17,,,,,18,18,17,,18,18,,18,17,',
',,17,17,,17,17,,,,17,17,17,17,18,,17,,,,18,,18,,18,18,,18,18,18,,18',
'18,18,18,,,18,18,,,18,,,18,18,,,,,,,18,,,,,,18,,,,18,18,,18,18,,,,18',
'18,18,18,379,379,18,,379,379,,379,379,115,,,,,,,,,,,,,,115,379,115,',
'115,115,,379,,379,,379,379,,379,379,379,,379,379,379,379,,,379,379,115',
',379,,,379,379,,,,,368,368,379,,368,368,,368,379,,,,379,379,,379,379',
',,,379,379,379,379,368,,379,,,,368,,368,,368,368,,368,368,368,,368,368',
',,,,368,368,,,368,,,368,368,,,,,42,42,368,,42,42,,42,368,,,,368,368',
',368,368,,,,368,368,368,368,42,,368,,,,42,,42,,42,42,,42,42,42,,42,42',
',,,,42,42,,,42,,,42,42,,,,,43,43,42,,43,43,,43,42,,,,42,42,,42,42,,',
',42,42,42,42,43,,42,,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43',
',,43,43,,,,,44,44,43,,44,44,,44,43,,,,43,43,,43,43,,,,43,43,43,43,44',
',43,,,,44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,,,44',
',,,,,44,,,,44,44,,44,44,,,,44,44,44,44,242,242,44,,242,242,,242,242',
',,,,,,,,,,,,,,,242,46,46,,,46,242,,242,,242,242,,242,242,242,,242,242',
'242,242,,,242,242,,,242,,,242,242,,,,,,,242,,46,,,46,242,,,,242,242',
',242,242,,,,242,242,242,242,243,243,242,46,243,243,,243,243,190,,,,46',
'46,,,,,,,,,190,243,190,,190,190,,243,,243,,243,243,,243,243,243,,243',
'243,243,243,,,243,243,190,,243,,,243,243,,,,,52,52,243,,52,52,52,52',
'243,,,,243,243,,243,243,,,,243,243,243,243,52,,243,,,,52,,52,,52,52',
',52,52,52,,52,52,52,52,,,52,52,,,52,,,52,52,,,,,53,53,52,,53,53,53,53',
'52,,,,52,52,,52,52,,,,52,52,52,52,53,,52,,,,53,,53,,53,53,,53,53,53',
',53,53,53,53,,,53,53,,,53,,,53,53,,,,,,,53,,,,,,53,,,,53,53,,53,53,',
',,53,53,53,53,54,54,53,,54,54,,54,54,112,,,,,,,,,,,,,,112,54,112,,112',
'112,,54,,54,,54,54,,54,54,54,,54,54,54,54,,,54,54,112,,54,,,54,54,,',
',,60,60,54,,60,60,,60,54,,,,54,54,,54,54,,,,54,54,54,54,60,,54,,,,60',
',60,,60,60,,60,60,60,,60,60,60,60,,,60,60,,,60,,,60,60,,,,,356,356,60',
',356,356,,356,60,,,,60,60,,60,60,,,,60,60,60,60,356,,60,,,,356,,356',
',356,356,,356,356,356,,356,356,356,356,,,356,356,,,356,,,356,356,,,',
',350,350,356,,350,350,,350,356,,,,356,356,,356,356,,,,356,356,356,356',
'350,,356,,,,350,,350,,350,350,,350,350,350,,350,350,,,,,350,350,,,350',
',,350,350,,,,,65,65,350,,65,65,,65,350,,,,350,350,,350,350,,,,350,350',
'350,350,65,,350,,,,65,,65,,65,65,,65,65,65,,65,65,,,,,65,65,,,65,,,65',
'65,,,,,244,244,65,,244,244,,244,65,,,,65,65,,65,65,,,,65,65,65,65,244',
',65,,,,244,,244,,244,244,,244,244,244,,244,244,,,,,244,244,,,244,,,244',
'244,,,,,69,69,244,,69,69,,69,244,,,,244,244,,244,244,,,,244,244,244',
'244,69,,244,,,,69,,69,,69,69,,69,69,69,,69,69,69,69,,,69,69,,,69,,,69',
'69,,,,,171,171,69,,171,171,,171,69,,,,69,69,,69,69,,,,69,69,69,69,171',
',69,,,,171,,171,,171,171,,171,171,171,,171,171,,,,,171,171,,,171,,,171',
'171,,,,,71,71,171,,71,71,,71,171,,,,171,171,,171,171,,,,171,171,171',
'171,71,,171,,,,71,,71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71,,,71',
'71,,,,,72,72,71,,72,72,,72,71,,,,71,71,,71,71,,,,71,71,71,71,72,,71',
',,,72,,72,,72,72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,73',
'73,72,,73,73,,73,72,,,,72,72,,72,72,,,,72,72,72,72,73,,72,,,,73,,73',
',73,73,,73,73,73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,74,74,73,,74',
'74,,74,73,,,,73,73,,73,73,,,,73,73,73,73,74,,73,,,,74,,74,,74,74,,74',
'74,74,,74,74,74,74,,,74,74,,,74,,,74,74,,,,,75,75,74,,75,75,,75,74,',
',,74,74,,74,74,,,,74,74,74,74,75,,74,,,,75,,75,,75,75,,75,75,75,,75',
'75,75,75,,,75,75,,,75,,,75,75,,,,,76,76,75,,76,76,,76,75,,,,75,75,,75',
'75,,,,75,75,75,75,76,,75,,,,76,,76,,76,76,,76,76,76,,76,76,76,76,,,76',
'76,,,76,,,76,76,,,,,77,77,76,,77,77,,77,76,,,,76,76,,76,76,,,,76,76',
'76,76,77,,76,,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,',
'77,77,,,,,78,78,77,,78,78,,78,77,,,,77,77,,77,77,,,,77,77,77,77,78,',
'77,,,,78,,78,,78,78,,78,78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,',
'79,79,78,,79,79,,79,78,,,,78,78,,78,78,,,,78,78,78,78,79,,78,,,,79,79',
'79,79,79,79,79,79,79,79,,79,79,,,,,79,79,79,79,79,,,79,79,,,,,,,79,',
',,,79,79,,,,79,79,,79,79,,,,79,79,79,79,80,80,79,,80,80,,80,,,,,,,,',
',,,,,,,,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,,,,,80,80,,,80,,,80,80',
',,,,81,81,80,,81,81,,81,80,,,,80,80,,80,80,,,,80,80,80,80,81,,80,,,',
'81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,,,81,,,81,81,,,,,82,82,81,',
'82,82,,82,81,,,,81,81,,81,81,,,,81,81,81,81,82,,81,,,,82,,82,,82,82',
',82,82,82,,82,82,,,,,82,82,,,82,,,82,82,,,,,83,83,82,,83,83,,83,82,',
',,82,82,,82,82,,,,82,82,82,82,83,,82,,,,83,,83,,83,83,,83,83,83,,83',
'83,,,,,83,83,,,83,,,83,83,,,,,84,84,83,,84,84,,84,83,,,,83,83,,83,83',
',,,83,83,83,83,84,,83,,,,84,,84,,84,84,,84,84,84,,84,84,,,,,84,84,,',
'84,,,84,84,,,,,85,85,84,,85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84',
'85,,84,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,',
'86,86,85,,86,86,,86,85,,,,85,85,,85,85,,,,85,85,85,85,86,,85,,,,86,',
'86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87',
',87,86,,,,86,86,,86,86,,,,86,86,86,86,87,,86,,,,87,,87,,87,87,,87,87',
'87,,87,87,,,,,87,87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87',
',87,87,,,,87,87,87,87,88,,87,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88',
'88,,,88,,,88,88,,,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88',
'88,88,89,,88,,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89',
',,,,90,90,89,,90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,,89,,,',
'90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,',
'91,91,,91,90,,,,90,90,,90,90,,,,90,90,90,90,91,,90,,,,91,,91,,91,91',
',91,91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,',
',,91,91,,91,91,,,,91,91,91,91,92,,91,,,,92,,92,,92,92,,92,92,92,,92',
'92,,,,,92,92,,,92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92',
',,,92,92,92,92,93,,92,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,',
'93,,,93,93,,,,,94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93',
'94,,93,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,',
'95,95,94,,95,95,,95,94,,,,94,94,,94,94,,,,94,94,94,94,95,,94,,,,95,',
'95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96',
',96,95,,,,95,95,,95,95,,,,95,95,95,95,96,,95,,,,96,,96,,96,96,,96,96',
'96,,96,96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96',
',96,96,,,,96,96,96,96,97,,96,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97',
'97,,,97,,,97,97,,,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97',
'97,97,98,,97,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98',
',,,,99,99,98,,99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,,98,,,',
'99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100,99',
',100,100,,100,99,,,99,99,99,,99,99,,,,99,99,99,99,100,100,99,,,,100',
',100,,100,100,,100,100,100,,100,100,100,100,,,100,100,,,100,,,100,100',
',,,,278,278,100,,278,278,,278,100,,,,100,100,,100,100,,,,100,100,100',
'100,278,,100,,,,278,,278,,278,278,,278,278,278,,278,278,,,,,278,278',
',,278,,,278,278,,,,,169,169,278,,169,169,,169,278,,,,278,278,,278,278',
',,,278,278,278,278,169,,278,,,,169,,169,,169,169,,169,169,169,,169,169',
',,,,169,169,,,169,,,169,169,,,,,103,103,169,,103,103,,103,169,,,,169',
'169,,169,169,,,,169,169,169,169,103,,169,,,,103,,103,,103,103,,103,103',
'103,,103,103,,,,,103,103,,,103,,,103,103,,,,,104,104,103,,104,104,,104',
'103,,,,103,103,,103,103,,,,103,103,103,103,104,,103,,,,104,,104,,104',
'104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,,165,165,104',
',165,165,,165,104,,165,,104,104,,104,104,,,,104,104,104,104,165,,104',
',,,165,,165,,165,165,,165,165,165,,165,165,,,,,165,165,,,165,,,165,165',
',,,,249,249,165,,249,249,,249,165,,,,165,165,,165,165,,,,165,165,165',
'165,249,,165,,,,249,,249,,249,249,,249,249,249,,249,249,249,249,,,249',
'249,,,249,,,249,249,,,,,107,107,249,,107,107,,107,249,,,,249,249,,249',
'249,,,,249,249,249,249,107,,249,,,,107,,107,,107,107,,107,107,107,,107',
'107,,,,,107,107,,,107,,,107,107,,,,,326,326,107,,326,326,,326,107,,',
',107,107,,107,107,,,,107,107,107,107,326,,107,,,,326,,326,,326,326,',
'326,326,326,,326,326,326,326,,,326,326,,,326,,,326,326,,,,,,,326,,,',
',,326,,,,326,326,,326,326,,,,326,326,326,326,253,253,326,,253,253,,253',
'253,,,,,,,,,,,,,,,,253,247,247,,,247,253,,253,,253,253,,253,253,253',
',253,253,253,253,,,253,253,,,253,,,253,253,,,,,,,253,,247,,,247,253',
',,,253,253,,253,253,,,,253,253,253,253,324,324,253,247,324,324,,324',
'324,,,,,247,247,,,,,,,,,,324,,,,,,324,,324,,324,324,,324,324,324,,324',
'324,,,,,324,324,,,324,,,324,324,,,,,254,254,324,,254,254,,254,324,,',
',324,324,,324,324,,,,324,324,324,324,254,,324,,,,254,,254,,254,254,',
'254,254,254,,254,254,254,254,,,254,254,,,254,,,254,254,,,,,259,259,254',
',259,259,,259,254,,,,254,254,,254,254,,,,254,254,254,254,259,,254,,',
',259,,259,,259,259,,259,259,259,,259,259,259,259,,,259,259,,,259,,,259',
'259,,,,,317,317,259,,317,317,,317,259,,,,259,259,,259,259,,,,259,259',
'259,259,317,,259,,,,317,,317,,317,317,,317,317,317,,317,317,317,317',
',,317,317,,,317,,,317,317,,,,,316,316,317,,316,316,,316,317,,,,317,317',
',317,317,,,,317,317,317,317,316,,317,,,,316,,316,,316,316,,316,316,316',
',316,316,,,,,316,316,,,316,,,316,316,,,,,,,316,,,,,,316,,,,316,316,',
'316,316,,,,316,316,316,316,152,152,316,,152,152,,152,152,,,,,,,,,,,',
',,,,152,,,,,,152,,152,,152,152,,152,152,152,,152,152,152,152,,,152,152',
',,152,,,152,152,,,,,120,120,152,,120,120,,120,152,,,,152,152,,152,152',
',,,152,152,152,152,120,120,152,,,,120,,120,,120,120,,120,120,120,,120',
'120,120,120,,,120,120,,,120,,,120,120,,,,,149,149,120,,149,149,,149',
'120,,,,120,120,,120,120,,,,120,120,120,120,149,,120,,,,149,,149,,149',
'149,,149,149,149,,149,149,149,149,,,149,149,,,149,,,149,149,,,,,274',
'274,149,,274,274,,274,149,,,,149,149,,149,149,,,,149,149,149,149,274',
',149,,,,274,,274,,274,274,,274,274,274,,274,274,,,,,274,274,,,274,,',
'274,274,,,,,275,275,274,,275,275,,275,274,,,,274,274,,274,274,,,,274',
'274,274,274,275,,274,,,,275,,275,,275,275,,275,275,275,,275,275,,,,',
'275,275,,,275,,,275,275,,,,,313,313,275,,313,313,,313,275,,,,275,275',
',275,275,,,,275,275,275,275,313,,275,,,,313,,313,,313,313,,313,313,313',
',313,313,,,,,313,313,,,313,,,313,313,,,,,276,276,313,,276,276,,276,313',
',,,313,313,,313,313,,,,313,313,313,313,276,,313,,,,276,,276,,276,276',
',276,276,276,,276,276,,,,,276,276,,,276,,,276,276,,,,,302,302,276,,302',
'302,,302,276,,,,276,276,,276,276,,,,276,276,276,276,302,,276,,,,302',
',302,,302,302,,302,302,302,,302,302,,,,,302,302,,,302,,,302,302,,,,',
'279,279,302,,279,279,,279,302,,,,302,302,,302,302,,,,302,302,302,302',
'279,,302,,,,279,,279,,279,279,,279,279,279,,279,279,,,,,279,279,,,279',
',,279,279,,,,,170,170,279,,170,170,,170,279,,,,279,279,,279,279,,,,279',
'279,279,279,170,,279,,,,170,,170,,170,170,,170,170,170,,170,170,,,,',
'170,170,,,170,,,170,170,,,,,,,170,,,,,,170,,,,170,170,,170,170,346,',
',170,170,170,170,,,170,,,346,346,346,,346,,346,346,,346,346,346,346',
',329,329,,,329,,,,,,,,,,346,,,,346,346,,,346,346,346,346,346,346,,346',
'346,124,,124,,,346,,,329,,,329,124,124,124,,124,,124,124,,124,124,124',
'124,,346,,,,,329,,,,,,,,,124,329,329,,124,124,,,124,124,124,124,124',
'124,,124,124,123,,123,,,124,,,,,,,123,123,123,,123,193,123,123,,123',
'123,123,123,,124,,,,,193,,193,,193,193,,,,123,,,,123,123,,,123,123,123',
'123,123,123,,123,123,193,,,,,123,,,,,193,193,,,,193,193,121,,121,,,193',
',,,123,,,121,121,121,,121,195,121,121,,121,121,121,121,,193,,,,,195',
',195,,195,195,,,,121,,,,121,121,,216,121,121,121,121,121,121,,121,121',
'195,,216,216,216,121,216,,216,216,,216,216,216,216,195,195,,,,,,195',
',,,121,,,,216,,,,216,216,,151,216,216,216,216,216,216,,216,216,,,151',
'151,151,216,151,,151,151,,151,151,151,151,,,,,,,,,,,,216,,,,151,,,,151',
'151,,,151,151,151,151,151,151,,151,151,,,,,,151,221,,,,,,,,,,151,151',
'221,221,221,221,221,199,221,221,151,221,221,221,221,,,,,,,199,,199,',
'199,199,,,,221,,,,221,221,,,221,221,221,221,221,221,,221,221,199,,,',
',221,,,199,199,199,199,,,,199,199,9,,,,,199,,,,221,,,9,9,9,,9,,9,9,',
'9,9,9,9,,199,,,,,,,,,,,,,,9,,,,9,9,,,9,9,9,9,9,9,208,9,9,,,208,,,9,',
',,208,208,208,,208,196,208,208,,208,208,208,208,,,,,9,,196,,196,,196',
'196,,,,208,,,,208,208,,207,208,208,208,208,208,208,,208,208,196,,207',
'207,207,208,207,,207,207,,207,207,207,207,196,196,,,,,,196,,,,208,,',
',207,,,,,207,,364,207,207,207,207,207,207,,207,207,,,364,364,364,207',
'364,,364,364,,364,364,364,364,,,,,,,,,,,,207,,,,364,,,,364,364,,,364',
'364,364,364,364,364,163,364,364,,,,,,364,,,,163,163,163,163,163,197',
'163,163,,163,163,163,163,,,,,364,,197,,197,,197,197,,,,163,,,,163,163',
',188,163,163,163,163,163,163,,163,163,197,,188,188,188,163,188,,188',
'188,,188,188,188,188,197,197,,,,,,197,,,,163,,,,188,,,,188,188,,344',
'188,188,188,188,188,188,,188,188,,,344,344,344,188,344,,344,344,,344',
'344,344,344,,,,,,,,,,,,188,,,,344,,,,344,344,,206,344,344,344,344,344',
'344,,344,344,,,206,206,206,344,206,,206,206,,206,206,206,206,205,,,',
',,,,,,,344,,205,205,206,205,,205,205,198,205,,206,206,206,206,206,206',
',206,206,,,198,,198,206,198,198,205,,,,,,,,205,205,205,205,205,205,',
'205,205,,206,,198,,205,,,,,,198,198,198,198,345,,,198,198,,,,,,198,205',
'345,345,345,,345,,345,345,194,345,345,345,345,,,,,,,198,,,194,,194,',
'194,194,345,,,,345,345,,,345,345,345,345,345,345,,345,345,,,,194,,345',
',,,,,,,194,194,347,,,194,194,,,,,,194,345,347,347,347,,347,,347,347',
'203,347,347,347,347,,,,,,,194,,203,203,,203,,203,203,347,203,,,347,347',
',,347,347,347,347,347,347,,347,347,,,,203,,347,,,,,,203,203,203,203',
'203,203,348,203,203,,,,,,203,347,,,348,348,348,,348,200,348,348,,348',
'348,348,348,,,,,203,,200,,200,,200,200,,,,348,,,,348,348,,,348,348,348',
'348,348,348,,348,348,200,,,,,348,,,200,200,200,200,200,200,201,200,200',
',,,,,200,,,,348,,201,,201,202,201,201,,,,,,,,,,200,202,202,,202,,202',
'202,,202,,201,,,,,,,,201,201,201,201,201,201,,201,201,202,,,,,201,,',
'202,202,202,202,202,202,204,202,202,,,,,,202,,,,201,204,204,,204,,204',
'204,,204,,,,,,,,202,,,,,,,,,,,204,,,,,,,,204,204,204,204,204,204,,204',
'204,,,,,,204,,,271,271,271,271,,271,271,271,,271,,271,271,,,,,,204,271',
'271,271,,,,271,,,,,,,,,,,,271,271,,,,,,,,,,,,271,271,271,271,273,273',
'273,273,,273,273,273,,273,,273,273,,,,,,,273,273,273,,,,273,,,,,,,,',
',,,273,273,,,,,,,,,,,,273,273,273,273,303,303,303,303,,303,303,303,',
'303,,303,303,,,,,,,303,303,303,,,,303,,,,,,,,,,,,303,303,,,,,,,,,,,',
'303,303,303,303,215,215,215,215,,215,215,215,,215,,215,215,,,,,,,215',
'215,215,,,,215,,,,,,,,,,,,215,215,,,,,,,,,,,,215,215,215,215' ]
        racc_action_check = arr = ::Array.new(6809, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   313,   nil,   nil,   118,   296,   nil,   173,   295,  5793,
   466,   526,    69,   nil,   nil,   670,   730,   790,   850,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   220,   256,  1054,  1114,  1174,    48,  1283,   nil,   nil,   nil,
   nil,   nil,  1402,  1462,  1546,   nil,   nil,   nil,   nil,   nil,
  1606,   nil,   201,   202,   nil,  1786,   nil,   nil,   267,  1906,
   246,  2026,  2086,  2146,  2206,  2266,  2326,  2386,  2446,  2506,
  2590,  2650,  2710,  2770,  2830,  2890,  2950,  3010,  3070,  3130,
  3190,  3250,  3310,  3370,  3430,  3490,  3550,  3610,  3670,  3730,
  3790,   217,   248,  3970,  4030,   245,   238,  4210,   219,   nil,
   nil,   nil,  1550,    -1,   614,   938,   203,   nil,   220,    55,
  4822,  5562,   nil,  5488,  5431,   200,   195,   nil,   186,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   173,   nil,   170,   nil,
    90,   nil,   nil,   166,   nil,    14,   nil,   nil,   170,  4882,
    60,  5656,  4762,   nil,   135,   nil,   nil,   nil,   nil,    84,
    79,    61,   266,  5995,   153,  4090,     5,     3,     2,  3910,
  5302,  1966,   nil,   nil,    -9,    82,   108,   287,    -2,     4,
    -4,    -1,   nil,   nil,   nil,   nil,   nil,   nil,  6042,    61,
  1346,     2,   350,  5505,  6253,  5579,  5864,  6012,  6181,  5736,
  6396,  6450,  6467,  6325,  6521,  6161,  6136,  5894,  5847,   nil,
   nil,   406,   231,   209,   nil,  6723,  5609,   202,   nil,   276,
   239,  5719,   nil,   241,   nil,   120,   nil,   nil,   262,   nil,
   230,   nil,   nil,   nil,   nil,   nil,   217,   189,   -24,   204,
    -7,   nil,  1258,  1342,  1846,   170,   132,  4379,   -28,  4150,
    21,    55,   nil,  4354,  4498,   nil,   nil,   nil,   nil,  4558,
   nil,   nil,   nil,   nil,    92,   nil,   nil,   nil,   nil,   101,
   119,  6561,   155,  6615,  4942,  5002,  5122,   nil,  3850,  5242,
   181,   nil,   170,   nil,   185,   nil,   187,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   195,  5182,  6669,   200,   nil,    93,   nil,   200,   206,
   nil,   149,    30,  5062,   nil,   nil,  4678,  4618,   nil,   222,
    83,   226,   204,     9,  4438,   nil,  4270,   237,   nil,  5405,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   178,
    58,   238,   nil,   nil,  6089,  6233,  5374,  6305,  6379,   260,
  1726,   203,    -8,   nil,   nil,   263,  1666,   nil,   nil,   nil,
   251,   nil,   nil,   nil,  5941,    13,   118,   nil,   994,   274,
   251,   nil,   276,   277,   nil,   nil,   277,   nil,   nil,   934,
   nil,   nil,   nil,   282,   253,   nil,   nil,   nil,   nil,   nil,
   287,   nil,   nil,   nil,   nil,   610,   nil,   346,   178,   nil,
   300,   nil,   nil,    58,   nil,   304,   nil,   306,   nil,   307,
   nil,   nil,   nil,   278,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -241,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -241,  -241,  -241,   -33,   -34,  -241,  -241,  -241,  -241,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -86,   -90,  -241,  -241,  -241,  -241,  -241,  -174,  -175,  -176,
  -177,  -178,  -241,  -241,  -241,  -189,  -190,  -191,  -192,  -193,
  -241,  -195,  -241,  -208,  -211,  -241,  -216,  -217,  -241,  -241,
    -7,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -126,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -121,  -240,  -240,   -22,   -23,  -241,  -240,  -136,
  -157,  -158,   -46,  -241,   -47,   -54,  -241,   -87,  -241,  -241,
  -241,  -241,   -97,  -241,  -241,  -240,  -218,  -145,  -147,  -148,
  -149,  -150,  -151,  -153,  -154,   -14,  -218,  -180,  -218,  -182,
  -241,  -185,  -186,  -241,  -194,  -241,  -199,  -202,  -241,  -206,
  -241,  -241,  -241,   418,    -6,    -9,   -11,   -12,   -13,   -17,
   -18,   -19,   -20,  -241,  -218,  -241,   -79,   -80,   -81,  -229,
  -235,  -223,  -127,  -130,  -241,  -226,  -224,  -232,  -175,  -176,
  -177,  -178,  -222,  -227,  -228,  -230,  -231,  -233,   -59,  -241,
   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,
   -48,   -49,   -50,   -51,   -52,   -53,   -55,   -56,  -241,   -57,
  -115,  -241,  -218,   -83,   -91,  -126,  -125,  -241,  -124,  -241,
  -220,  -241,   -28,  -240,  -159,  -241,   -58,   -92,  -241,   -95,
  -218,  -162,  -164,  -165,  -166,  -167,  -169,  -241,  -241,  -172,
  -241,   -89,  -241,  -241,  -241,  -241,  -240,  -219,  -241,  -219,
  -241,  -241,  -183,  -241,  -241,  -196,  -197,  -198,  -200,  -241,
  -203,  -204,  -205,  -207,  -218,  -209,  -212,  -214,  -215,    -8,
  -241,  -126,  -241,  -219,  -241,  -241,  -241,   -35,  -241,  -241,
  -218,  -117,  -241,   -85,  -218,  -129,  -241,  -223,  -224,  -225,
  -226,  -229,  -232,  -234,  -235,  -236,  -237,  -238,  -239,  -122,
  -123,  -241,  -221,  -126,  -241,  -139,  -241,  -160,  -218,  -241,
   -94,  -241,  -219,  -241,  -170,  -171,  -241,  -241,   -88,  -241,
  -100,  -241,  -106,  -241,  -241,  -110,  -240,  -241,  -155,  -241,
  -146,  -152,   -15,  -179,  -181,  -184,  -187,  -188,  -201,  -241,
  -241,  -218,   -26,  -128,  -133,  -131,  -132,   -60,  -119,  -241,
  -219,   -82,  -241,   -25,   -29,  -218,  -240,  -140,  -141,  -142,
  -241,   -93,   -96,  -163,  -168,  -241,  -100,   -99,  -241,  -241,
  -106,  -105,  -241,  -241,  -109,  -111,  -241,  -137,  -138,  -241,
  -156,  -210,  -213,  -241,   -30,  -116,  -118,   -84,  -120,   -27,
  -241,  -161,  -173,   -98,  -101,  -241,  -104,  -241,  -240,  -134,
  -241,  -144,   -24,   -31,  -135,  -241,  -103,  -241,  -108,  -241,
  -113,  -114,  -143,  -220,  -102,  -107,  -112,   -32 ]

racc_goto_table = [
     2,   112,   114,   115,   117,   116,   224,   220,   125,   129,
   131,   189,   210,   144,   301,   266,   330,   230,   367,   325,
   376,   239,   409,   224,   246,   164,   324,    70,   121,   123,
   124,   280,   223,   394,   250,   343,   251,   105,   106,   135,
   135,   143,   227,   136,   138,   209,   371,   146,   264,   245,
   390,   151,   239,   217,   219,   354,   304,   357,   155,   156,
   157,   158,   272,   327,   393,   163,   188,   190,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
   203,   204,   205,   206,   207,   208,   383,   135,   331,   216,
   216,   212,   154,   221,   396,   363,   315,   314,   380,   375,
   336,   260,   159,   160,   161,   162,   261,   135,     3,   258,
   282,   240,   259,   257,   147,   149,   262,     1,   nil,   nil,
   nil,   305,   nil,   308,   281,   nil,   nil,   239,   311,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   125,   269,
   129,   131,   nil,   nil,   328,   nil,   nil,   nil,   nil,   263,
   nil,   114,   270,   nil,   nil,   121,   123,   124,   nil,   nil,
   nil,   284,   339,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   283,   349,   nil,
   nil,   nil,   352,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   208,   nil,   nil,
   nil,   nil,   nil,   nil,   382,   nil,   360,   417,   nil,   nil,
   129,   131,   338,   nil,   239,   nil,   nil,   341,   nil,   nil,
   nil,   nil,   nil,   nil,   378,   nil,   nil,   nil,   309,   nil,
   188,   nil,   nil,   nil,   nil,   nil,   332,   nil,   nil,   384,
   143,   337,   319,   321,   nil,   nil,   146,   365,   nil,   355,
   nil,   nil,   nil,   389,   378,   nil,   nil,   nil,   nil,   nil,
   344,   345,   346,   386,   347,   348,   nil,   nil,   nil,   358,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   221,   nil,
   nil,   nil,   129,   131,   nil,   nil,   410,   nil,   nil,   364,
   nil,   nil,   188,   413,   332,   nil,   nil,   nil,   nil,   nil,
   188,   nil,   nil,   nil,   nil,   387,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   208,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   121,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   400,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   221,
   nil,   nil,   nil,   nil,   nil,   405,   nil,   407,   411 ]

racc_goto_check = [
     2,    10,    10,    10,    37,     6,    49,    13,    57,    35,
    34,    19,    50,    80,    14,    88,    65,    42,    44,    47,
    59,    36,    48,    49,    15,    11,    46,     5,    10,    10,
    10,    51,    58,    43,    15,    54,    15,     9,     9,     6,
     6,     6,    41,     8,     8,    20,    45,     6,    42,    58,
    59,    10,    36,    53,    53,    16,    61,    62,     6,     6,
     6,     6,    15,    64,    44,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    12,     6,    67,    10,
    10,     8,     5,    10,    45,    68,    69,    71,    65,    47,
    75,    76,     9,     9,     9,     9,    77,     6,     3,    81,
    15,     8,    82,    84,    85,    86,    87,     1,   nil,   nil,
   nil,    49,   nil,    42,    50,   nil,   nil,    36,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,     6,
    35,    34,   nil,   nil,    49,   nil,   nil,   nil,   nil,     2,
   nil,    10,     2,   nil,   nil,    10,    10,    10,   nil,   nil,
   nil,    11,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    15,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,    88,   nil,    15,    14,   nil,   nil,
    35,    34,    80,   nil,    36,   nil,   nil,    11,   nil,   nil,
   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,     2,   nil,
    10,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,    15,
     6,     6,     2,     2,   nil,   nil,     6,    19,   nil,    11,
   nil,   nil,   nil,    15,    49,   nil,   nil,   nil,   nil,   nil,
    10,    10,    10,    50,    10,    10,   nil,   nil,   nil,    57,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,    35,    34,   nil,   nil,    49,   nil,   nil,    10,
   nil,   nil,    10,    13,     6,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   117,     0,   108,   nil,    23,   -13,   nil,    -9,    27,
   -14,   -54,  -255,  -100,  -206,  -102,  -247,   nil,   nil,   -69,
   -54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -36,   -37,   -98,   -36,   nil,   nil,
   nil,   -76,  -102,  -335,  -302,  -276,  -218,  -225,  -376,  -102,
   -87,  -180,   nil,   -50,  -238,   nil,   nil,   -37,   -76,  -306,
   nil,  -167,  -249,   nil,  -183,  -231,   nil,  -160,  -217,  -142,
   nil,  -140,   nil,   nil,   nil,  -153,   -47,   -42,   nil,   nil,
   -47,   -36,   -33,   nil,   -32,    52,    52,   -33,  -136 ]

racc_goto_default = [
   nil,   nil,   377,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   222,    13,    14,   323,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,   nil,    40,    41,
   118,   nil,   nil,   122,   nil,   nil,   nil,   nil,   nil,   218,
   nil,   nil,   102,   nil,   172,   174,   173,   109,   nil,   nil,
   108,   nil,   nil,   126,   nil,   127,   128,   132,   231,   232,
   233,   234,   235,   238,   140,   142,    55,    56,    57,    60,
   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 92, :_reduce_1,
  1, 92, :_reduce_2,
  0, 92, :_reduce_3,
  1, 93, :_reduce_4,
  1, 95, :_reduce_5,
  3, 95, :_reduce_6,
  2, 95, :_reduce_7,
  1, 96, :_reduce_8,
  3, 96, :_reduce_9,
  1, 97, :_reduce_none,
  3, 97, :_reduce_11,
  3, 97, :_reduce_12,
  3, 97, :_reduce_13,
  1, 99, :_reduce_14,
  3, 99, :_reduce_15,
  1, 98, :_reduce_none,
  3, 98, :_reduce_17,
  3, 98, :_reduce_18,
  3, 98, :_reduce_19,
  3, 98, :_reduce_20,
  1, 100, :_reduce_none,
  2, 100, :_reduce_22,
  2, 100, :_reduce_23,
  7, 100, :_reduce_24,
  5, 100, :_reduce_25,
  5, 100, :_reduce_26,
  4, 107, :_reduce_27,
  1, 104, :_reduce_28,
  3, 104, :_reduce_29,
  1, 103, :_reduce_30,
  2, 103, :_reduce_31,
  4, 103, :_reduce_32,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  4, 101, :_reduce_35,
  3, 101, :_reduce_36,
  3, 101, :_reduce_37,
  3, 101, :_reduce_38,
  3, 101, :_reduce_39,
  3, 101, :_reduce_40,
  3, 101, :_reduce_41,
  3, 101, :_reduce_42,
  3, 101, :_reduce_43,
  3, 101, :_reduce_44,
  3, 101, :_reduce_45,
  2, 101, :_reduce_46,
  2, 101, :_reduce_47,
  3, 101, :_reduce_48,
  3, 101, :_reduce_49,
  3, 101, :_reduce_50,
  3, 101, :_reduce_51,
  3, 101, :_reduce_52,
  3, 101, :_reduce_53,
  2, 101, :_reduce_54,
  3, 101, :_reduce_55,
  3, 101, :_reduce_56,
  3, 101, :_reduce_57,
  3, 101, :_reduce_58,
  1, 110, :_reduce_59,
  3, 110, :_reduce_60,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_77,
  1, 108, :_reduce_78,
  1, 108, :_reduce_79,
  1, 108, :_reduce_80,
  1, 108, :_reduce_81,
  5, 109, :_reduce_82,
  3, 109, :_reduce_83,
  6, 109, :_reduce_84,
  4, 109, :_reduce_85,
  1, 113, :_reduce_86,
  2, 113, :_reduce_87,
  4, 129, :_reduce_88,
  3, 129, :_reduce_89,
  1, 129, :_reduce_90,
  3, 130, :_reduce_91,
  2, 128, :_reduce_92,
  3, 132, :_reduce_93,
  2, 132, :_reduce_94,
  2, 131, :_reduce_95,
  4, 131, :_reduce_96,
  2, 116, :_reduce_97,
  5, 134, :_reduce_98,
  4, 134, :_reduce_99,
  0, 135, :_reduce_none,
  2, 135, :_reduce_101,
  4, 135, :_reduce_102,
  3, 135, :_reduce_103,
  6, 117, :_reduce_104,
  5, 117, :_reduce_105,
  0, 136, :_reduce_none,
  4, 136, :_reduce_107,
  3, 136, :_reduce_108,
  5, 115, :_reduce_109,
  1, 137, :_reduce_110,
  2, 137, :_reduce_111,
  5, 138, :_reduce_112,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 111, :_reduce_none,
  4, 111, :_reduce_116,
  1, 142, :_reduce_117,
  3, 142, :_reduce_118,
  3, 141, :_reduce_119,
  6, 114, :_reduce_120,
  2, 114, :_reduce_121,
  3, 143, :_reduce_122,
  3, 143, :_reduce_123,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  0, 102, :_reduce_126,
  1, 102, :_reduce_127,
  3, 102, :_reduce_128,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 145, :_reduce_131,
  3, 145, :_reduce_132,
  3, 145, :_reduce_133,
  6, 118, :_reduce_134,
  7, 119, :_reduce_135,
  1, 151, :_reduce_136,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_140,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  7, 120, :_reduce_143,
  6, 120, :_reduce_144,
  1, 154, :_reduce_145,
  3, 154, :_reduce_146,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_149,
  1, 156, :_reduce_none,
  1, 157, :_reduce_151,
  3, 157, :_reduce_152,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_156,
  1, 148, :_reduce_none,
  1, 148, :_reduce_158,
  1, 149, :_reduce_159,
  2, 149, :_reduce_160,
  4, 149, :_reduce_161,
  1, 133, :_reduce_162,
  3, 133, :_reduce_163,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 162, :_reduce_168,
  1, 162, :_reduce_169,
  2, 163, :_reduce_170,
  2, 161, :_reduce_171,
  1, 164, :_reduce_172,
  4, 164, :_reduce_173,
  1, 112, :_reduce_174,
  1, 122, :_reduce_175,
  1, 122, :_reduce_176,
  1, 122, :_reduce_177,
  1, 122, :_reduce_178,
  4, 123, :_reduce_179,
  2, 123, :_reduce_180,
  4, 123, :_reduce_181,
  2, 123, :_reduce_182,
  3, 124, :_reduce_183,
  4, 124, :_reduce_184,
  2, 124, :_reduce_185,
  1, 165, :_reduce_186,
  3, 165, :_reduce_187,
  3, 166, :_reduce_188,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 167, :_reduce_192,
  1, 167, :_reduce_193,
  2, 168, :_reduce_194,
  1, 170, :_reduce_195,
  1, 172, :_reduce_196,
  1, 173, :_reduce_197,
  2, 171, :_reduce_198,
  1, 174, :_reduce_199,
  1, 175, :_reduce_200,
  2, 175, :_reduce_201,
  2, 169, :_reduce_202,
  2, 176, :_reduce_203,
  2, 176, :_reduce_204,
  3, 94, :_reduce_205,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  0, 177, :_reduce_208,
  2, 177, :_reduce_209,
  4, 177, :_reduce_210,
  1, 121, :_reduce_211,
  3, 121, :_reduce_212,
  5, 121, :_reduce_213,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 127, :_reduce_216,
  1, 125, :_reduce_217,
  0, 106, :_reduce_none,
  1, 106, :_reduce_219,
  0, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 140, :_reduce_240 ]

racc_reduce_n = 241

racc_shift_n = 418

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :LISTSTART => 88,
  :SPLAT => 89,
  :MODULO => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 65)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 137)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 144)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 153)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_77(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_78(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_79(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_81(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_82(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_86(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_87(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_88(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_91(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_92(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_93(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_94(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_95(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_97(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_98(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_101(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_102(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_103(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 352)
  def _reduce_104(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_107(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 370)
  def _reduce_108(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_109(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_110(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_111(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'egrammar.ra', 405)
  def _reduce_116(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 410)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_119(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_120(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_122(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_123(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_127(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_128(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_131(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_133(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_134(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 494)
  def _reduce_135(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 504)
  def _reduce_136(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_140(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 530)
  def _reduce_143(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 534)
  def _reduce_144(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_145(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_146(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'egrammar.ra', 552)
  def _reduce_149(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_151(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_152(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_158(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_159(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_160(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_161(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_162(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_163(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_168(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_169(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_170(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_171(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_172(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_173(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_174(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_175(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_176(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_177(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_178(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_179(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_180(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_181(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_182(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_183(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_184(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_185(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_186(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_187(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_188(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_192(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_193(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_194(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_195(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_196(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_198(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_199(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_200(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_201(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_202(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_203(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_204(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_205(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_208(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_209(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_210(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_211(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_212(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_213(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 214 omitted

# reduce 215 omitted

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_216(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_217(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_219(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_240(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
